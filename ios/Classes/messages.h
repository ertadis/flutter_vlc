// Autogenerated from Pigeon (v21.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class ViewMessage;
@class CreateMessage;
@class SetMediaMessage;
@class BooleanMessage;
@class LoopingMessage;
@class VolumeMessage;
@class PlaybackSpeedMessage;
@class PositionMessage;
@class DurationMessage;
@class DelayMessage;
@class TrackCountMessage;
@class SnapshotMessage;
@class SpuTracksMessage;
@class SpuTrackMessage;
@class AddSubtitleMessage;
@class AudioTracksMessage;
@class AudioTrackMessage;
@class AddAudioMessage;
@class VideoTracksMessage;
@class VideoTrackMessage;
@class VideoScaleMessage;
@class VideoAspectRatioMessage;
@class RendererServicesMessage;
@class RendererScanningMessage;
@class RendererDevicesMessage;
@class RenderDeviceMessage;
@class RecordMessage;

@interface ViewMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@end

@interface CreateMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    packageName:(nullable NSString *)packageName
    autoPlay:(nullable NSNumber *)autoPlay
    hwAcc:(nullable NSNumber *)hwAcc
    options:(nullable NSArray<NSString *> *)options;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, copy, nullable) NSString * packageName;
@property(nonatomic, strong, nullable) NSNumber * autoPlay;
@property(nonatomic, strong, nullable) NSNumber * hwAcc;
@property(nonatomic, copy, nullable) NSArray<NSString *> * options;
@end

@interface SetMediaMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    packageName:(nullable NSString *)packageName
    autoPlay:(nullable NSNumber *)autoPlay
    hwAcc:(nullable NSNumber *)hwAcc;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, copy, nullable) NSString * packageName;
@property(nonatomic, strong, nullable) NSNumber * autoPlay;
@property(nonatomic, strong, nullable) NSNumber * hwAcc;
@end

@interface BooleanMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    result:(nullable NSNumber *)result;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * result;
@end

@interface LoopingMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    isLooping:(nullable NSNumber *)isLooping;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * isLooping;
@end

@interface VolumeMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    volume:(nullable NSNumber *)volume;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * volume;
@end

@interface PlaybackSpeedMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    speed:(nullable NSNumber *)speed;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * speed;
@end

@interface PositionMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    position:(nullable NSNumber *)position;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * position;
@end

@interface DurationMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    duration:(nullable NSNumber *)duration;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * duration;
@end

@interface DelayMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    delay:(nullable NSNumber *)delay;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * delay;
@end

@interface TrackCountMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    count:(nullable NSNumber *)count;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * count;
@end

@interface SnapshotMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    snapshot:(nullable NSString *)snapshot;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * snapshot;
@end

@interface SpuTracksMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    subtitles:(nullable NSDictionary<id, id> *)subtitles;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSDictionary<id, id> * subtitles;
@end

@interface SpuTrackMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    spuTrackNumber:(nullable NSNumber *)spuTrackNumber;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * spuTrackNumber;
@end

@interface AddSubtitleMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    isSelected:(nullable NSNumber *)isSelected;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, strong, nullable) NSNumber * isSelected;
@end

@interface AudioTracksMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    audios:(nullable NSDictionary<id, id> *)audios;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSDictionary<id, id> * audios;
@end

@interface AudioTrackMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    audioTrackNumber:(nullable NSNumber *)audioTrackNumber;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * audioTrackNumber;
@end

@interface AddAudioMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    isSelected:(nullable NSNumber *)isSelected;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, strong, nullable) NSNumber * isSelected;
@end

@interface VideoTracksMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    videos:(nullable NSDictionary<id, id> *)videos;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSDictionary<id, id> * videos;
@end

@interface VideoTrackMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    videoTrackNumber:(nullable NSNumber *)videoTrackNumber;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * videoTrackNumber;
@end

@interface VideoScaleMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    scale:(nullable NSNumber *)scale;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, strong, nullable) NSNumber * scale;
@end

@interface VideoAspectRatioMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    aspectRatio:(nullable NSString *)aspectRatio;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * aspectRatio;
@end

@interface RendererServicesMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    services:(nullable NSArray<NSString *> *)services;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSArray<NSString *> * services;
@end

@interface RendererScanningMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererService:(nullable NSString *)rendererService;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * rendererService;
@end

@interface RendererDevicesMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererDevices:(nullable NSDictionary<id, id> *)rendererDevices;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSDictionary<id, id> * rendererDevices;
@end

@interface RenderDeviceMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererDevice:(nullable NSString *)rendererDevice;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * rendererDevice;
@end

@interface RecordMessage : NSObject
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    saveDirectory:(nullable NSString *)saveDirectory;
@property(nonatomic, strong, nullable) NSNumber * viewId;
@property(nonatomic, copy, nullable) NSString * saveDirectory;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *GetMessagesCodec(void);

@protocol VlcPlayerApi
- (void)initializeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)createMsg:(CreateMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)disposeMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setStreamUrlMsg:(SetMediaMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)playMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)pauseMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)stopMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanMessage *)isPlayingMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanMessage *)isSeekableMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setLoopingMsg:(LoopingMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)seekToMsg:(PositionMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable PositionMessage *)positionMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable DurationMessage *)durationMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVolumeMsg:(VolumeMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable VolumeMessage *)getVolumeMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setPlaybackSpeedMsg:(PlaybackSpeedMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable PlaybackSpeedMessage *)getPlaybackSpeedMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable SnapshotMessage *)takeSnapshotMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable TrackCountMessage *)getSpuTracksCountMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable SpuTracksMessage *)getSpuTracksMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setSpuTrackMsg:(SpuTrackMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable SpuTrackMessage *)getSpuTrackMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setSpuDelayMsg:(DelayMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable DelayMessage *)getSpuDelayMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)addSubtitleTrackMsg:(AddSubtitleMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable TrackCountMessage *)getAudioTracksCountMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable AudioTracksMessage *)getAudioTracksMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAudioTrackMsg:(AudioTrackMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable AudioTrackMessage *)getAudioTrackMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAudioDelayMsg:(DelayMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable DelayMessage *)getAudioDelayMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)addAudioTrackMsg:(AddAudioMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable TrackCountMessage *)getVideoTracksCountMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable VideoTracksMessage *)getVideoTracksMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVideoTrackMsg:(VideoTrackMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable VideoTrackMessage *)getVideoTrackMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVideoScaleMsg:(VideoScaleMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable VideoScaleMessage *)getVideoScaleMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVideoAspectRatioMsg:(VideoAspectRatioMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable VideoAspectRatioMessage *)getVideoAspectRatioMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable RendererServicesMessage *)getAvailableRendererServicesMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)startRendererScanningMsg:(RendererScanningMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)stopRendererScanningMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable RendererDevicesMessage *)getRendererDevicesMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)castToRendererMsg:(RenderDeviceMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanMessage *)startRecordingMsg:(RecordMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanMessage *)stopRecordingMsg:(ViewMessage *)msg error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpVlcPlayerApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VlcPlayerApi> *_Nullable api);

extern void SetUpVlcPlayerApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VlcPlayerApi> *_Nullable api, NSString *messageChannelSuffix);

NS_ASSUME_NONNULL_END

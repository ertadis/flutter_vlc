// Autogenerated from Pigeon (v21.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface ViewMessage ()
+ (ViewMessage *)fromList:(NSArray<id> *)list;
+ (nullable ViewMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface CreateMessage ()
+ (CreateMessage *)fromList:(NSArray<id> *)list;
+ (nullable CreateMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SetMediaMessage ()
+ (SetMediaMessage *)fromList:(NSArray<id> *)list;
+ (nullable SetMediaMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface BooleanMessage ()
+ (BooleanMessage *)fromList:(NSArray<id> *)list;
+ (nullable BooleanMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface LoopingMessage ()
+ (LoopingMessage *)fromList:(NSArray<id> *)list;
+ (nullable LoopingMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VolumeMessage ()
+ (VolumeMessage *)fromList:(NSArray<id> *)list;
+ (nullable VolumeMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PlaybackSpeedMessage ()
+ (PlaybackSpeedMessage *)fromList:(NSArray<id> *)list;
+ (nullable PlaybackSpeedMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PositionMessage ()
+ (PositionMessage *)fromList:(NSArray<id> *)list;
+ (nullable PositionMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface DurationMessage ()
+ (DurationMessage *)fromList:(NSArray<id> *)list;
+ (nullable DurationMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface DelayMessage ()
+ (DelayMessage *)fromList:(NSArray<id> *)list;
+ (nullable DelayMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface TrackCountMessage ()
+ (TrackCountMessage *)fromList:(NSArray<id> *)list;
+ (nullable TrackCountMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SnapshotMessage ()
+ (SnapshotMessage *)fromList:(NSArray<id> *)list;
+ (nullable SnapshotMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SpuTracksMessage ()
+ (SpuTracksMessage *)fromList:(NSArray<id> *)list;
+ (nullable SpuTracksMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SpuTrackMessage ()
+ (SpuTrackMessage *)fromList:(NSArray<id> *)list;
+ (nullable SpuTrackMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AddSubtitleMessage ()
+ (AddSubtitleMessage *)fromList:(NSArray<id> *)list;
+ (nullable AddSubtitleMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AudioTracksMessage ()
+ (AudioTracksMessage *)fromList:(NSArray<id> *)list;
+ (nullable AudioTracksMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AudioTrackMessage ()
+ (AudioTrackMessage *)fromList:(NSArray<id> *)list;
+ (nullable AudioTrackMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface AddAudioMessage ()
+ (AddAudioMessage *)fromList:(NSArray<id> *)list;
+ (nullable AddAudioMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VideoTracksMessage ()
+ (VideoTracksMessage *)fromList:(NSArray<id> *)list;
+ (nullable VideoTracksMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VideoTrackMessage ()
+ (VideoTrackMessage *)fromList:(NSArray<id> *)list;
+ (nullable VideoTrackMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VideoScaleMessage ()
+ (VideoScaleMessage *)fromList:(NSArray<id> *)list;
+ (nullable VideoScaleMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VideoAspectRatioMessage ()
+ (VideoAspectRatioMessage *)fromList:(NSArray<id> *)list;
+ (nullable VideoAspectRatioMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface RendererServicesMessage ()
+ (RendererServicesMessage *)fromList:(NSArray<id> *)list;
+ (nullable RendererServicesMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface RendererScanningMessage ()
+ (RendererScanningMessage *)fromList:(NSArray<id> *)list;
+ (nullable RendererScanningMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface RendererDevicesMessage ()
+ (RendererDevicesMessage *)fromList:(NSArray<id> *)list;
+ (nullable RendererDevicesMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface RenderDeviceMessage ()
+ (RenderDeviceMessage *)fromList:(NSArray<id> *)list;
+ (nullable RenderDeviceMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface RecordMessage ()
+ (RecordMessage *)fromList:(NSArray<id> *)list;
+ (nullable RecordMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation ViewMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId {
  ViewMessage* pigeonResult = [[ViewMessage alloc] init];
  pigeonResult.viewId = viewId;
  return pigeonResult;
}
+ (ViewMessage *)fromList:(NSArray<id> *)list {
  ViewMessage *pigeonResult = [[ViewMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable ViewMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ViewMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
  ];
}
@end

@implementation CreateMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    packageName:(nullable NSString *)packageName
    autoPlay:(nullable NSNumber *)autoPlay
    hwAcc:(nullable NSNumber *)hwAcc
    options:(nullable NSArray<NSString *> *)options {
  CreateMessage* pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.uri = uri;
  pigeonResult.type = type;
  pigeonResult.packageName = packageName;
  pigeonResult.autoPlay = autoPlay;
  pigeonResult.hwAcc = hwAcc;
  pigeonResult.options = options;
  return pigeonResult;
}
+ (CreateMessage *)fromList:(NSArray<id> *)list {
  CreateMessage *pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.uri = GetNullableObjectAtIndex(list, 1);
  pigeonResult.type = GetNullableObjectAtIndex(list, 2);
  pigeonResult.packageName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.autoPlay = GetNullableObjectAtIndex(list, 4);
  pigeonResult.hwAcc = GetNullableObjectAtIndex(list, 5);
  pigeonResult.options = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable CreateMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CreateMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.uri ?: [NSNull null],
    self.type ?: [NSNull null],
    self.packageName ?: [NSNull null],
    self.autoPlay ?: [NSNull null],
    self.hwAcc ?: [NSNull null],
    self.options ?: [NSNull null],
  ];
}
@end

@implementation SetMediaMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    packageName:(nullable NSString *)packageName
    autoPlay:(nullable NSNumber *)autoPlay
    hwAcc:(nullable NSNumber *)hwAcc {
  SetMediaMessage* pigeonResult = [[SetMediaMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.uri = uri;
  pigeonResult.type = type;
  pigeonResult.packageName = packageName;
  pigeonResult.autoPlay = autoPlay;
  pigeonResult.hwAcc = hwAcc;
  return pigeonResult;
}
+ (SetMediaMessage *)fromList:(NSArray<id> *)list {
  SetMediaMessage *pigeonResult = [[SetMediaMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.uri = GetNullableObjectAtIndex(list, 1);
  pigeonResult.type = GetNullableObjectAtIndex(list, 2);
  pigeonResult.packageName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.autoPlay = GetNullableObjectAtIndex(list, 4);
  pigeonResult.hwAcc = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable SetMediaMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SetMediaMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.uri ?: [NSNull null],
    self.type ?: [NSNull null],
    self.packageName ?: [NSNull null],
    self.autoPlay ?: [NSNull null],
    self.hwAcc ?: [NSNull null],
  ];
}
@end

@implementation BooleanMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    result:(nullable NSNumber *)result {
  BooleanMessage* pigeonResult = [[BooleanMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.result = result;
  return pigeonResult;
}
+ (BooleanMessage *)fromList:(NSArray<id> *)list {
  BooleanMessage *pigeonResult = [[BooleanMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.result = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable BooleanMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [BooleanMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.result ?: [NSNull null],
  ];
}
@end

@implementation LoopingMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    isLooping:(nullable NSNumber *)isLooping {
  LoopingMessage* pigeonResult = [[LoopingMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.isLooping = isLooping;
  return pigeonResult;
}
+ (LoopingMessage *)fromList:(NSArray<id> *)list {
  LoopingMessage *pigeonResult = [[LoopingMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.isLooping = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable LoopingMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [LoopingMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.isLooping ?: [NSNull null],
  ];
}
@end

@implementation VolumeMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    volume:(nullable NSNumber *)volume {
  VolumeMessage* pigeonResult = [[VolumeMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.volume = volume;
  return pigeonResult;
}
+ (VolumeMessage *)fromList:(NSArray<id> *)list {
  VolumeMessage *pigeonResult = [[VolumeMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.volume = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable VolumeMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VolumeMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.volume ?: [NSNull null],
  ];
}
@end

@implementation PlaybackSpeedMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    speed:(nullable NSNumber *)speed {
  PlaybackSpeedMessage* pigeonResult = [[PlaybackSpeedMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.speed = speed;
  return pigeonResult;
}
+ (PlaybackSpeedMessage *)fromList:(NSArray<id> *)list {
  PlaybackSpeedMessage *pigeonResult = [[PlaybackSpeedMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.speed = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PlaybackSpeedMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PlaybackSpeedMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.speed ?: [NSNull null],
  ];
}
@end

@implementation PositionMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    position:(nullable NSNumber *)position {
  PositionMessage* pigeonResult = [[PositionMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.position = position;
  return pigeonResult;
}
+ (PositionMessage *)fromList:(NSArray<id> *)list {
  PositionMessage *pigeonResult = [[PositionMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.position = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PositionMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PositionMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.position ?: [NSNull null],
  ];
}
@end

@implementation DurationMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    duration:(nullable NSNumber *)duration {
  DurationMessage* pigeonResult = [[DurationMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.duration = duration;
  return pigeonResult;
}
+ (DurationMessage *)fromList:(NSArray<id> *)list {
  DurationMessage *pigeonResult = [[DurationMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.duration = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable DurationMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [DurationMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.duration ?: [NSNull null],
  ];
}
@end

@implementation DelayMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    delay:(nullable NSNumber *)delay {
  DelayMessage* pigeonResult = [[DelayMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.delay = delay;
  return pigeonResult;
}
+ (DelayMessage *)fromList:(NSArray<id> *)list {
  DelayMessage *pigeonResult = [[DelayMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.delay = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable DelayMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [DelayMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.delay ?: [NSNull null],
  ];
}
@end

@implementation TrackCountMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    count:(nullable NSNumber *)count {
  TrackCountMessage* pigeonResult = [[TrackCountMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.count = count;
  return pigeonResult;
}
+ (TrackCountMessage *)fromList:(NSArray<id> *)list {
  TrackCountMessage *pigeonResult = [[TrackCountMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.count = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable TrackCountMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [TrackCountMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.count ?: [NSNull null],
  ];
}
@end

@implementation SnapshotMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    snapshot:(nullable NSString *)snapshot {
  SnapshotMessage* pigeonResult = [[SnapshotMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.snapshot = snapshot;
  return pigeonResult;
}
+ (SnapshotMessage *)fromList:(NSArray<id> *)list {
  SnapshotMessage *pigeonResult = [[SnapshotMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.snapshot = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SnapshotMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SnapshotMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.snapshot ?: [NSNull null],
  ];
}
@end

@implementation SpuTracksMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    subtitles:(nullable NSDictionary *)subtitles {
  SpuTracksMessage* pigeonResult = [[SpuTracksMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.subtitles = subtitles;
  return pigeonResult;
}
+ (SpuTracksMessage *)fromList:(NSArray<id> *)list {
  SpuTracksMessage *pigeonResult = [[SpuTracksMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.subtitles = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SpuTracksMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SpuTracksMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.subtitles ?: [NSNull null],
  ];
}
@end

@implementation SpuTrackMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    spuTrackNumber:(nullable NSNumber *)spuTrackNumber {
  SpuTrackMessage* pigeonResult = [[SpuTrackMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.spuTrackNumber = spuTrackNumber;
  return pigeonResult;
}
+ (SpuTrackMessage *)fromList:(NSArray<id> *)list {
  SpuTrackMessage *pigeonResult = [[SpuTrackMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.spuTrackNumber = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SpuTrackMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SpuTrackMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.spuTrackNumber ?: [NSNull null],
  ];
}
@end

@implementation AddSubtitleMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    isSelected:(nullable NSNumber *)isSelected {
  AddSubtitleMessage* pigeonResult = [[AddSubtitleMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.uri = uri;
  pigeonResult.type = type;
  pigeonResult.isSelected = isSelected;
  return pigeonResult;
}
+ (AddSubtitleMessage *)fromList:(NSArray<id> *)list {
  AddSubtitleMessage *pigeonResult = [[AddSubtitleMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.uri = GetNullableObjectAtIndex(list, 1);
  pigeonResult.type = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isSelected = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AddSubtitleMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AddSubtitleMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.uri ?: [NSNull null],
    self.type ?: [NSNull null],
    self.isSelected ?: [NSNull null],
  ];
}
@end

@implementation AudioTracksMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    audios:(nullable NSDictionary *)audios {
  AudioTracksMessage* pigeonResult = [[AudioTracksMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.audios = audios;
  return pigeonResult;
}
+ (AudioTracksMessage *)fromList:(NSArray<id> *)list {
  AudioTracksMessage *pigeonResult = [[AudioTracksMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.audios = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AudioTracksMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AudioTracksMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.audios ?: [NSNull null],
  ];
}
@end

@implementation AudioTrackMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    audioTrackNumber:(nullable NSNumber *)audioTrackNumber {
  AudioTrackMessage* pigeonResult = [[AudioTrackMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.audioTrackNumber = audioTrackNumber;
  return pigeonResult;
}
+ (AudioTrackMessage *)fromList:(NSArray<id> *)list {
  AudioTrackMessage *pigeonResult = [[AudioTrackMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.audioTrackNumber = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AudioTrackMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AudioTrackMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.audioTrackNumber ?: [NSNull null],
  ];
}
@end

@implementation AddAudioMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    uri:(nullable NSString *)uri
    type:(nullable NSNumber *)type
    isSelected:(nullable NSNumber *)isSelected {
  AddAudioMessage* pigeonResult = [[AddAudioMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.uri = uri;
  pigeonResult.type = type;
  pigeonResult.isSelected = isSelected;
  return pigeonResult;
}
+ (AddAudioMessage *)fromList:(NSArray<id> *)list {
  AddAudioMessage *pigeonResult = [[AddAudioMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.uri = GetNullableObjectAtIndex(list, 1);
  pigeonResult.type = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isSelected = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AddAudioMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [AddAudioMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.uri ?: [NSNull null],
    self.type ?: [NSNull null],
    self.isSelected ?: [NSNull null],
  ];
}
@end

@implementation VideoTracksMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    videos:(nullable NSDictionary *)videos {
  VideoTracksMessage* pigeonResult = [[VideoTracksMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.videos = videos;
  return pigeonResult;
}
+ (VideoTracksMessage *)fromList:(NSArray<id> *)list {
  VideoTracksMessage *pigeonResult = [[VideoTracksMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.videos = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable VideoTracksMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VideoTracksMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.videos ?: [NSNull null],
  ];
}
@end

@implementation VideoTrackMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    videoTrackNumber:(nullable NSNumber *)videoTrackNumber {
  VideoTrackMessage* pigeonResult = [[VideoTrackMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.videoTrackNumber = videoTrackNumber;
  return pigeonResult;
}
+ (VideoTrackMessage *)fromList:(NSArray<id> *)list {
  VideoTrackMessage *pigeonResult = [[VideoTrackMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.videoTrackNumber = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable VideoTrackMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VideoTrackMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.videoTrackNumber ?: [NSNull null],
  ];
}
@end

@implementation VideoScaleMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    scale:(nullable NSNumber *)scale {
  VideoScaleMessage* pigeonResult = [[VideoScaleMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.scale = scale;
  return pigeonResult;
}
+ (VideoScaleMessage *)fromList:(NSArray<id> *)list {
  VideoScaleMessage *pigeonResult = [[VideoScaleMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.scale = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable VideoScaleMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VideoScaleMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.scale ?: [NSNull null],
  ];
}
@end

@implementation VideoAspectRatioMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    aspectRatio:(nullable NSString *)aspectRatio {
  VideoAspectRatioMessage* pigeonResult = [[VideoAspectRatioMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.aspectRatio = aspectRatio;
  return pigeonResult;
}
+ (VideoAspectRatioMessage *)fromList:(NSArray<id> *)list {
  VideoAspectRatioMessage *pigeonResult = [[VideoAspectRatioMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.aspectRatio = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable VideoAspectRatioMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VideoAspectRatioMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.aspectRatio ?: [NSNull null],
  ];
}
@end

@implementation RendererServicesMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    services:(nullable NSArray<NSString *> *)services {
  RendererServicesMessage* pigeonResult = [[RendererServicesMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.services = services;
  return pigeonResult;
}
+ (RendererServicesMessage *)fromList:(NSArray<id> *)list {
  RendererServicesMessage *pigeonResult = [[RendererServicesMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.services = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RendererServicesMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [RendererServicesMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.services ?: [NSNull null],
  ];
}
@end

@implementation RendererScanningMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererService:(nullable NSString *)rendererService {
  RendererScanningMessage* pigeonResult = [[RendererScanningMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.rendererService = rendererService;
  return pigeonResult;
}
+ (RendererScanningMessage *)fromList:(NSArray<id> *)list {
  RendererScanningMessage *pigeonResult = [[RendererScanningMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.rendererService = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RendererScanningMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [RendererScanningMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.rendererService ?: [NSNull null],
  ];
}
@end

@implementation RendererDevicesMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererDevices:(nullable NSDictionary *)rendererDevices {
  RendererDevicesMessage* pigeonResult = [[RendererDevicesMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.rendererDevices = rendererDevices;
  return pigeonResult;
}
+ (RendererDevicesMessage *)fromList:(NSArray<id> *)list {
  RendererDevicesMessage *pigeonResult = [[RendererDevicesMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.rendererDevices = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RendererDevicesMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [RendererDevicesMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.rendererDevices ?: [NSNull null],
  ];
}
@end

@implementation RenderDeviceMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    rendererDevice:(nullable NSString *)rendererDevice {
  RenderDeviceMessage* pigeonResult = [[RenderDeviceMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.rendererDevice = rendererDevice;
  return pigeonResult;
}
+ (RenderDeviceMessage *)fromList:(NSArray<id> *)list {
  RenderDeviceMessage *pigeonResult = [[RenderDeviceMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.rendererDevice = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RenderDeviceMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [RenderDeviceMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.rendererDevice ?: [NSNull null],
  ];
}
@end

@implementation RecordMessage
+ (instancetype)makeWithViewId:(nullable NSNumber *)viewId
    saveDirectory:(nullable NSString *)saveDirectory {
  RecordMessage* pigeonResult = [[RecordMessage alloc] init];
  pigeonResult.viewId = viewId;
  pigeonResult.saveDirectory = saveDirectory;
  return pigeonResult;
}
+ (RecordMessage *)fromList:(NSArray<id> *)list {
  RecordMessage *pigeonResult = [[RecordMessage alloc] init];
  pigeonResult.viewId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.saveDirectory = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RecordMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [RecordMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.viewId ?: [NSNull null],
    self.saveDirectory ?: [NSNull null],
  ];
}
@end

@interface MessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation MessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [ViewMessage fromList:[self readValue]];
    case 130: 
      return [CreateMessage fromList:[self readValue]];
    case 131: 
      return [SetMediaMessage fromList:[self readValue]];
    case 132: 
      return [BooleanMessage fromList:[self readValue]];
    case 133: 
      return [LoopingMessage fromList:[self readValue]];
    case 134: 
      return [VolumeMessage fromList:[self readValue]];
    case 135: 
      return [PlaybackSpeedMessage fromList:[self readValue]];
    case 136: 
      return [PositionMessage fromList:[self readValue]];
    case 137: 
      return [DurationMessage fromList:[self readValue]];
    case 138: 
      return [DelayMessage fromList:[self readValue]];
    case 139: 
      return [TrackCountMessage fromList:[self readValue]];
    case 140: 
      return [SnapshotMessage fromList:[self readValue]];
    case 141: 
      return [SpuTracksMessage fromList:[self readValue]];
    case 142: 
      return [SpuTrackMessage fromList:[self readValue]];
    case 143: 
      return [AddSubtitleMessage fromList:[self readValue]];
    case 144: 
      return [AudioTracksMessage fromList:[self readValue]];
    case 145: 
      return [AudioTrackMessage fromList:[self readValue]];
    case 146: 
      return [AddAudioMessage fromList:[self readValue]];
    case 147: 
      return [VideoTracksMessage fromList:[self readValue]];
    case 148: 
      return [VideoTrackMessage fromList:[self readValue]];
    case 149: 
      return [VideoScaleMessage fromList:[self readValue]];
    case 150: 
      return [VideoAspectRatioMessage fromList:[self readValue]];
    case 151: 
      return [RendererServicesMessage fromList:[self readValue]];
    case 152: 
      return [RendererScanningMessage fromList:[self readValue]];
    case 153: 
      return [RendererDevicesMessage fromList:[self readValue]];
    case 154: 
      return [RenderDeviceMessage fromList:[self readValue]];
    case 155: 
      return [RecordMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation MessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ViewMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CreateMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SetMediaMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BooleanMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LoopingMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VolumeMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlaybackSpeedMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PositionMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DurationMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DelayMessage class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[TrackCountMessage class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SnapshotMessage class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SpuTracksMessage class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SpuTrackMessage class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AddSubtitleMessage class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AudioTracksMessage class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AudioTrackMessage class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AddAudioMessage class]]) {
    [self writeByte:146];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoTracksMessage class]]) {
    [self writeByte:147];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoTrackMessage class]]) {
    [self writeByte:148];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoScaleMessage class]]) {
    [self writeByte:149];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoAspectRatioMessage class]]) {
    [self writeByte:150];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RendererServicesMessage class]]) {
    [self writeByte:151];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RendererScanningMessage class]]) {
    [self writeByte:152];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RendererDevicesMessage class]]) {
    [self writeByte:153];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RenderDeviceMessage class]]) {
    [self writeByte:154];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RecordMessage class]]) {
    [self writeByte:155];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *GetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MessagesPigeonCodecReaderWriter *readerWriter = [[MessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpVlcPlayerApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VlcPlayerApi> *api) {
  SetUpVlcPlayerApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpVlcPlayerApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VlcPlayerApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.initialize", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeWithError:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(initializeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initializeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.create", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(createMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        CreateMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api createMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.dispose", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(disposeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disposeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setStreamUrl", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStreamUrlMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setStreamUrlMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        SetMediaMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setStreamUrlMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.play", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(playMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(playMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api playMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.pause", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(pauseMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pauseMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.stop", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(stopMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api stopMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.isPlaying", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isPlayingMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(isPlayingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        BooleanMessage *output = [api isPlayingMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.isSeekable", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isSeekableMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(isSeekableMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        BooleanMessage *output = [api isSeekableMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setLooping", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoopingMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setLoopingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        LoopingMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLoopingMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.seekTo", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekToMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(seekToMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PositionMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api seekToMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.position", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(positionMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(positionMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        PositionMessage *output = [api positionMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.duration", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(durationMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(durationMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        DurationMessage *output = [api durationMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setVolume", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVolumeMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setVolumeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VolumeMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVolumeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVolume", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVolumeMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVolumeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VolumeMessage *output = [api getVolumeMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setPlaybackSpeed", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlaybackSpeedMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setPlaybackSpeedMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PlaybackSpeedMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setPlaybackSpeedMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getPlaybackSpeed", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlaybackSpeedMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getPlaybackSpeedMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        PlaybackSpeedMessage *output = [api getPlaybackSpeedMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.takeSnapshot", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeSnapshotMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(takeSnapshotMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        SnapshotMessage *output = [api takeSnapshotMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getSpuTracksCount", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSpuTracksCountMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getSpuTracksCountMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        TrackCountMessage *output = [api getSpuTracksCountMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getSpuTracks", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSpuTracksMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getSpuTracksMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        SpuTracksMessage *output = [api getSpuTracksMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setSpuTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSpuTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setSpuTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        SpuTrackMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSpuTrackMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getSpuTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSpuTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getSpuTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        SpuTrackMessage *output = [api getSpuTrackMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setSpuDelay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSpuDelayMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setSpuDelayMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        DelayMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSpuDelayMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getSpuDelay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSpuDelayMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getSpuDelayMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        DelayMessage *output = [api getSpuDelayMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.addSubtitleTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addSubtitleTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(addSubtitleTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AddSubtitleMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addSubtitleTrackMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getAudioTracksCount", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAudioTracksCountMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getAudioTracksCountMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        TrackCountMessage *output = [api getAudioTracksCountMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getAudioTracks", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAudioTracksMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getAudioTracksMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AudioTracksMessage *output = [api getAudioTracksMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setAudioTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAudioTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setAudioTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AudioTrackMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAudioTrackMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getAudioTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAudioTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getAudioTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        AudioTrackMessage *output = [api getAudioTrackMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setAudioDelay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAudioDelayMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setAudioDelayMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        DelayMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAudioDelayMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getAudioDelay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAudioDelayMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getAudioDelayMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        DelayMessage *output = [api getAudioDelayMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.addAudioTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addAudioTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(addAudioTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        AddAudioMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addAudioTrackMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVideoTracksCount", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVideoTracksCountMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVideoTracksCountMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        TrackCountMessage *output = [api getVideoTracksCountMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVideoTracks", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVideoTracksMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVideoTracksMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VideoTracksMessage *output = [api getVideoTracksMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setVideoTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVideoTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setVideoTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VideoTrackMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVideoTrackMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVideoTrack", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVideoTrackMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVideoTrackMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VideoTrackMessage *output = [api getVideoTrackMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setVideoScale", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVideoScaleMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setVideoScaleMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VideoScaleMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVideoScaleMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVideoScale", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVideoScaleMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVideoScaleMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VideoScaleMessage *output = [api getVideoScaleMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.setVideoAspectRatio", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVideoAspectRatioMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(setVideoAspectRatioMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VideoAspectRatioMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVideoAspectRatioMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getVideoAspectRatio", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getVideoAspectRatioMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getVideoAspectRatioMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        VideoAspectRatioMessage *output = [api getVideoAspectRatioMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getAvailableRendererServices", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAvailableRendererServicesMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getAvailableRendererServicesMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        RendererServicesMessage *output = [api getAvailableRendererServicesMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.startRendererScanning", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startRendererScanningMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(startRendererScanningMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        RendererScanningMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startRendererScanningMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.stopRendererScanning", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopRendererScanningMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(stopRendererScanningMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api stopRendererScanningMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.getRendererDevices", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getRendererDevicesMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(getRendererDevicesMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        RendererDevicesMessage *output = [api getRendererDevicesMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.castToRenderer", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(castToRendererMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(castToRendererMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        RenderDeviceMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api castToRendererMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.startRecording", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startRecordingMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(startRecordingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        RecordMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        BooleanMessage *output = [api startRecordingMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_vlc_player.VlcPlayerApi.stopRecording", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:GetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopRecordingMsg:error:)], @"VlcPlayerApi api (%@) doesn't respond to @selector(stopRecordingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ViewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        BooleanMessage *output = [api stopRecordingMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}

// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package software.solid.fluttervlcplayer;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ViewMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      public @NonNull ViewMessage build() {
        ViewMessage pigeonReturn = new ViewMessage();
        pigeonReturn.setViewId(viewId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(viewId);
      return toListResult;
    }

    static @NonNull ViewMessage fromList(@NonNull ArrayList<Object> list) {
      ViewMessage pigeonResult = new ViewMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @Nullable Boolean autoPlay;

    public @Nullable Boolean getAutoPlay() {
      return autoPlay;
    }

    public void setAutoPlay(@Nullable Boolean setterArg) {
      this.autoPlay = setterArg;
    }

    private @Nullable Long hwAcc;

    public @Nullable Long getHwAcc() {
      return hwAcc;
    }

    public void setHwAcc(@Nullable Long setterArg) {
      this.hwAcc = setterArg;
    }

    private @Nullable List<String> options;

    public @Nullable List<String> getOptions() {
      return options;
    }

    public void setOptions(@Nullable List<String> setterArg) {
      this.options = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean autoPlay;

      @CanIgnoreReturnValue
      public @NonNull Builder setAutoPlay(@Nullable Boolean setterArg) {
        this.autoPlay = setterArg;
        return this;
      }

      private @Nullable Long hwAcc;

      @CanIgnoreReturnValue
      public @NonNull Builder setHwAcc(@Nullable Long setterArg) {
        this.hwAcc = setterArg;
        return this;
      }

      private @Nullable List<String> options;

      @CanIgnoreReturnValue
      public @NonNull Builder setOptions(@Nullable List<String> setterArg) {
        this.options = setterArg;
        return this;
      }

      public @NonNull CreateMessage build() {
        CreateMessage pigeonReturn = new CreateMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setAutoPlay(autoPlay);
        pigeonReturn.setHwAcc(hwAcc);
        pigeonReturn.setOptions(options);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(viewId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(packageName);
      toListResult.add(autoPlay);
      toListResult.add(hwAcc);
      toListResult.add(options);
      return toListResult;
    }

    static @NonNull CreateMessage fromList(@NonNull ArrayList<Object> list) {
      CreateMessage pigeonResult = new CreateMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object uri = list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = list.get(2);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object packageName = list.get(3);
      pigeonResult.setPackageName((String) packageName);
      Object autoPlay = list.get(4);
      pigeonResult.setAutoPlay((Boolean) autoPlay);
      Object hwAcc = list.get(5);
      pigeonResult.setHwAcc((hwAcc == null) ? null : ((hwAcc instanceof Integer) ? (Integer) hwAcc : (Long) hwAcc));
      Object options = list.get(6);
      pigeonResult.setOptions((List<String>) options);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SetMediaMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @Nullable Boolean autoPlay;

    public @Nullable Boolean getAutoPlay() {
      return autoPlay;
    }

    public void setAutoPlay(@Nullable Boolean setterArg) {
      this.autoPlay = setterArg;
    }

    private @Nullable Long hwAcc;

    public @Nullable Long getHwAcc() {
      return hwAcc;
    }

    public void setHwAcc(@Nullable Long setterArg) {
      this.hwAcc = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean autoPlay;

      @CanIgnoreReturnValue
      public @NonNull Builder setAutoPlay(@Nullable Boolean setterArg) {
        this.autoPlay = setterArg;
        return this;
      }

      private @Nullable Long hwAcc;

      @CanIgnoreReturnValue
      public @NonNull Builder setHwAcc(@Nullable Long setterArg) {
        this.hwAcc = setterArg;
        return this;
      }

      public @NonNull SetMediaMessage build() {
        SetMediaMessage pigeonReturn = new SetMediaMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setAutoPlay(autoPlay);
        pigeonReturn.setHwAcc(hwAcc);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(viewId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(packageName);
      toListResult.add(autoPlay);
      toListResult.add(hwAcc);
      return toListResult;
    }

    static @NonNull SetMediaMessage fromList(@NonNull ArrayList<Object> list) {
      SetMediaMessage pigeonResult = new SetMediaMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object uri = list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = list.get(2);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object packageName = list.get(3);
      pigeonResult.setPackageName((String) packageName);
      Object autoPlay = list.get(4);
      pigeonResult.setAutoPlay((Boolean) autoPlay);
      Object hwAcc = list.get(5);
      pigeonResult.setHwAcc((hwAcc == null) ? null : ((hwAcc instanceof Integer) ? (Integer) hwAcc : (Long) hwAcc));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BooleanMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Boolean result;

    public @Nullable Boolean getResult() {
      return result;
    }

    public void setResult(@Nullable Boolean setterArg) {
      this.result = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Boolean result;

      @CanIgnoreReturnValue
      public @NonNull Builder setResult(@Nullable Boolean setterArg) {
        this.result = setterArg;
        return this;
      }

      public @NonNull BooleanMessage build() {
        BooleanMessage pigeonReturn = new BooleanMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setResult(result);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(result);
      return toListResult;
    }

    static @NonNull BooleanMessage fromList(@NonNull ArrayList<Object> list) {
      BooleanMessage pigeonResult = new BooleanMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object result = list.get(1);
      pigeonResult.setResult((Boolean) result);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LoopingMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Boolean isLooping;

    public @Nullable Boolean getIsLooping() {
      return isLooping;
    }

    public void setIsLooping(@Nullable Boolean setterArg) {
      this.isLooping = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Boolean isLooping;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsLooping(@Nullable Boolean setterArg) {
        this.isLooping = setterArg;
        return this;
      }

      public @NonNull LoopingMessage build() {
        LoopingMessage pigeonReturn = new LoopingMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setIsLooping(isLooping);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(isLooping);
      return toListResult;
    }

    static @NonNull LoopingMessage fromList(@NonNull ArrayList<Object> list) {
      LoopingMessage pigeonResult = new LoopingMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object isLooping = list.get(1);
      pigeonResult.setIsLooping((Boolean) isLooping);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VolumeMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long volume;

    public @Nullable Long getVolume() {
      return volume;
    }

    public void setVolume(@Nullable Long setterArg) {
      this.volume = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long volume;

      @CanIgnoreReturnValue
      public @NonNull Builder setVolume(@Nullable Long setterArg) {
        this.volume = setterArg;
        return this;
      }

      public @NonNull VolumeMessage build() {
        VolumeMessage pigeonReturn = new VolumeMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setVolume(volume);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(volume);
      return toListResult;
    }

    static @NonNull VolumeMessage fromList(@NonNull ArrayList<Object> list) {
      VolumeMessage pigeonResult = new VolumeMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object volume = list.get(1);
      pigeonResult.setVolume((volume == null) ? null : ((volume instanceof Integer) ? (Integer) volume : (Long) volume));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlaybackSpeedMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Double speed;

    public @Nullable Double getSpeed() {
      return speed;
    }

    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Double speed;

      @CanIgnoreReturnValue
      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }

      public @NonNull PlaybackSpeedMessage build() {
        PlaybackSpeedMessage pigeonReturn = new PlaybackSpeedMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setSpeed(speed);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(speed);
      return toListResult;
    }

    static @NonNull PlaybackSpeedMessage fromList(@NonNull ArrayList<Object> list) {
      PlaybackSpeedMessage pigeonResult = new PlaybackSpeedMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object speed = list.get(1);
      pigeonResult.setSpeed((Double) speed);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PositionMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long position;

    public @Nullable Long getPosition() {
      return position;
    }

    public void setPosition(@Nullable Long setterArg) {
      this.position = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long position;

      @CanIgnoreReturnValue
      public @NonNull Builder setPosition(@Nullable Long setterArg) {
        this.position = setterArg;
        return this;
      }

      public @NonNull PositionMessage build() {
        PositionMessage pigeonReturn = new PositionMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setPosition(position);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(position);
      return toListResult;
    }

    static @NonNull PositionMessage fromList(@NonNull ArrayList<Object> list) {
      PositionMessage pigeonResult = new PositionMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object position = list.get(1);
      pigeonResult.setPosition((position == null) ? null : ((position instanceof Integer) ? (Integer) position : (Long) position));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DurationMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long duration;

    public @Nullable Long getDuration() {
      return duration;
    }

    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long duration;

      @CanIgnoreReturnValue
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }

      public @NonNull DurationMessage build() {
        DurationMessage pigeonReturn = new DurationMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setDuration(duration);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(duration);
      return toListResult;
    }

    static @NonNull DurationMessage fromList(@NonNull ArrayList<Object> list) {
      DurationMessage pigeonResult = new DurationMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object duration = list.get(1);
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer) duration : (Long) duration));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DelayMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long delay;

    public @Nullable Long getDelay() {
      return delay;
    }

    public void setDelay(@Nullable Long setterArg) {
      this.delay = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long delay;

      @CanIgnoreReturnValue
      public @NonNull Builder setDelay(@Nullable Long setterArg) {
        this.delay = setterArg;
        return this;
      }

      public @NonNull DelayMessage build() {
        DelayMessage pigeonReturn = new DelayMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setDelay(delay);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(delay);
      return toListResult;
    }

    static @NonNull DelayMessage fromList(@NonNull ArrayList<Object> list) {
      DelayMessage pigeonResult = new DelayMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object delay = list.get(1);
      pigeonResult.setDelay((delay == null) ? null : ((delay instanceof Integer) ? (Integer) delay : (Long) delay));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TrackCountMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long count;

    public @Nullable Long getCount() {
      return count;
    }

    public void setCount(@Nullable Long setterArg) {
      this.count = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long count;

      @CanIgnoreReturnValue
      public @NonNull Builder setCount(@Nullable Long setterArg) {
        this.count = setterArg;
        return this;
      }

      public @NonNull TrackCountMessage build() {
        TrackCountMessage pigeonReturn = new TrackCountMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setCount(count);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(count);
      return toListResult;
    }

    static @NonNull TrackCountMessage fromList(@NonNull ArrayList<Object> list) {
      TrackCountMessage pigeonResult = new TrackCountMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object count = list.get(1);
      pigeonResult.setCount((count == null) ? null : ((count instanceof Integer) ? (Integer) count : (Long) count));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SnapshotMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String snapshot;

    public @Nullable String getSnapshot() {
      return snapshot;
    }

    public void setSnapshot(@Nullable String setterArg) {
      this.snapshot = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String snapshot;

      @CanIgnoreReturnValue
      public @NonNull Builder setSnapshot(@Nullable String setterArg) {
        this.snapshot = setterArg;
        return this;
      }

      public @NonNull SnapshotMessage build() {
        SnapshotMessage pigeonReturn = new SnapshotMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setSnapshot(snapshot);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(snapshot);
      return toListResult;
    }

    static @NonNull SnapshotMessage fromList(@NonNull ArrayList<Object> list) {
      SnapshotMessage pigeonResult = new SnapshotMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object snapshot = list.get(1);
      pigeonResult.setSnapshot((String) snapshot);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SpuTracksMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Map<Object, Object> subtitles;

    public @Nullable Map<Object, Object> getSubtitles() {
      return subtitles;
    }

    public void setSubtitles(@Nullable Map<Object, Object> setterArg) {
      this.subtitles = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> subtitles;

      @CanIgnoreReturnValue
      public @NonNull Builder setSubtitles(@Nullable Map<Object, Object> setterArg) {
        this.subtitles = setterArg;
        return this;
      }

      public @NonNull SpuTracksMessage build() {
        SpuTracksMessage pigeonReturn = new SpuTracksMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setSubtitles(subtitles);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(subtitles);
      return toListResult;
    }

    static @NonNull SpuTracksMessage fromList(@NonNull ArrayList<Object> list) {
      SpuTracksMessage pigeonResult = new SpuTracksMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object subtitles = list.get(1);
      pigeonResult.setSubtitles((Map<Object, Object>) subtitles);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SpuTrackMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long spuTrackNumber;

    public @Nullable Long getSpuTrackNumber() {
      return spuTrackNumber;
    }

    public void setSpuTrackNumber(@Nullable Long setterArg) {
      this.spuTrackNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long spuTrackNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setSpuTrackNumber(@Nullable Long setterArg) {
        this.spuTrackNumber = setterArg;
        return this;
      }

      public @NonNull SpuTrackMessage build() {
        SpuTrackMessage pigeonReturn = new SpuTrackMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setSpuTrackNumber(spuTrackNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(spuTrackNumber);
      return toListResult;
    }

    static @NonNull SpuTrackMessage fromList(@NonNull ArrayList<Object> list) {
      SpuTrackMessage pigeonResult = new SpuTrackMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object spuTrackNumber = list.get(1);
      pigeonResult.setSpuTrackNumber((spuTrackNumber == null) ? null : ((spuTrackNumber instanceof Integer) ? (Integer) spuTrackNumber : (Long) spuTrackNumber));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AddSubtitleMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean isSelected;

    public @Nullable Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@Nullable Boolean setterArg) {
      this.isSelected = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSelected(@Nullable Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull AddSubtitleMessage build() {
        AddSubtitleMessage pigeonReturn = new AddSubtitleMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(viewId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull AddSubtitleMessage fromList(@NonNull ArrayList<Object> list) {
      AddSubtitleMessage pigeonResult = new AddSubtitleMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object uri = list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = list.get(2);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object isSelected = list.get(3);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AudioTracksMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Map<Object, Object> audios;

    public @Nullable Map<Object, Object> getAudios() {
      return audios;
    }

    public void setAudios(@Nullable Map<Object, Object> setterArg) {
      this.audios = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> audios;

      @CanIgnoreReturnValue
      public @NonNull Builder setAudios(@Nullable Map<Object, Object> setterArg) {
        this.audios = setterArg;
        return this;
      }

      public @NonNull AudioTracksMessage build() {
        AudioTracksMessage pigeonReturn = new AudioTracksMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setAudios(audios);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(audios);
      return toListResult;
    }

    static @NonNull AudioTracksMessage fromList(@NonNull ArrayList<Object> list) {
      AudioTracksMessage pigeonResult = new AudioTracksMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object audios = list.get(1);
      pigeonResult.setAudios((Map<Object, Object>) audios);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AudioTrackMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long audioTrackNumber;

    public @Nullable Long getAudioTrackNumber() {
      return audioTrackNumber;
    }

    public void setAudioTrackNumber(@Nullable Long setterArg) {
      this.audioTrackNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long audioTrackNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setAudioTrackNumber(@Nullable Long setterArg) {
        this.audioTrackNumber = setterArg;
        return this;
      }

      public @NonNull AudioTrackMessage build() {
        AudioTrackMessage pigeonReturn = new AudioTrackMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setAudioTrackNumber(audioTrackNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(audioTrackNumber);
      return toListResult;
    }

    static @NonNull AudioTrackMessage fromList(@NonNull ArrayList<Object> list) {
      AudioTrackMessage pigeonResult = new AudioTrackMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object audioTrackNumber = list.get(1);
      pigeonResult.setAudioTrackNumber((audioTrackNumber == null) ? null : ((audioTrackNumber instanceof Integer) ? (Integer) audioTrackNumber : (Long) audioTrackNumber));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AddAudioMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean isSelected;

    public @Nullable Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@Nullable Boolean setterArg) {
      this.isSelected = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSelected(@Nullable Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull AddAudioMessage build() {
        AddAudioMessage pigeonReturn = new AddAudioMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setUri(uri);
        pigeonReturn.setType(type);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(viewId);
      toListResult.add(uri);
      toListResult.add(type);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull AddAudioMessage fromList(@NonNull ArrayList<Object> list) {
      AddAudioMessage pigeonResult = new AddAudioMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object uri = list.get(1);
      pigeonResult.setUri((String) uri);
      Object type = list.get(2);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object isSelected = list.get(3);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoTracksMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Map<Object, Object> videos;

    public @Nullable Map<Object, Object> getVideos() {
      return videos;
    }

    public void setVideos(@Nullable Map<Object, Object> setterArg) {
      this.videos = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> videos;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideos(@Nullable Map<Object, Object> setterArg) {
        this.videos = setterArg;
        return this;
      }

      public @NonNull VideoTracksMessage build() {
        VideoTracksMessage pigeonReturn = new VideoTracksMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setVideos(videos);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(videos);
      return toListResult;
    }

    static @NonNull VideoTracksMessage fromList(@NonNull ArrayList<Object> list) {
      VideoTracksMessage pigeonResult = new VideoTracksMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object videos = list.get(1);
      pigeonResult.setVideos((Map<Object, Object>) videos);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoTrackMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Long videoTrackNumber;

    public @Nullable Long getVideoTrackNumber() {
      return videoTrackNumber;
    }

    public void setVideoTrackNumber(@Nullable Long setterArg) {
      this.videoTrackNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Long videoTrackNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideoTrackNumber(@Nullable Long setterArg) {
        this.videoTrackNumber = setterArg;
        return this;
      }

      public @NonNull VideoTrackMessage build() {
        VideoTrackMessage pigeonReturn = new VideoTrackMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setVideoTrackNumber(videoTrackNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(videoTrackNumber);
      return toListResult;
    }

    static @NonNull VideoTrackMessage fromList(@NonNull ArrayList<Object> list) {
      VideoTrackMessage pigeonResult = new VideoTrackMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object videoTrackNumber = list.get(1);
      pigeonResult.setVideoTrackNumber((videoTrackNumber == null) ? null : ((videoTrackNumber instanceof Integer) ? (Integer) videoTrackNumber : (Long) videoTrackNumber));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoScaleMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Double scale;

    public @Nullable Double getScale() {
      return scale;
    }

    public void setScale(@Nullable Double setterArg) {
      this.scale = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Double scale;

      @CanIgnoreReturnValue
      public @NonNull Builder setScale(@Nullable Double setterArg) {
        this.scale = setterArg;
        return this;
      }

      public @NonNull VideoScaleMessage build() {
        VideoScaleMessage pigeonReturn = new VideoScaleMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setScale(scale);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(scale);
      return toListResult;
    }

    static @NonNull VideoScaleMessage fromList(@NonNull ArrayList<Object> list) {
      VideoScaleMessage pigeonResult = new VideoScaleMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object scale = list.get(1);
      pigeonResult.setScale((Double) scale);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoAspectRatioMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String aspectRatio;

    public @Nullable String getAspectRatio() {
      return aspectRatio;
    }

    public void setAspectRatio(@Nullable String setterArg) {
      this.aspectRatio = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String aspectRatio;

      @CanIgnoreReturnValue
      public @NonNull Builder setAspectRatio(@Nullable String setterArg) {
        this.aspectRatio = setterArg;
        return this;
      }

      public @NonNull VideoAspectRatioMessage build() {
        VideoAspectRatioMessage pigeonReturn = new VideoAspectRatioMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setAspectRatio(aspectRatio);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(aspectRatio);
      return toListResult;
    }

    static @NonNull VideoAspectRatioMessage fromList(@NonNull ArrayList<Object> list) {
      VideoAspectRatioMessage pigeonResult = new VideoAspectRatioMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object aspectRatio = list.get(1);
      pigeonResult.setAspectRatio((String) aspectRatio);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RendererServicesMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable List<String> services;

    public @Nullable List<String> getServices() {
      return services;
    }

    public void setServices(@Nullable List<String> setterArg) {
      this.services = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable List<String> services;

      @CanIgnoreReturnValue
      public @NonNull Builder setServices(@Nullable List<String> setterArg) {
        this.services = setterArg;
        return this;
      }

      public @NonNull RendererServicesMessage build() {
        RendererServicesMessage pigeonReturn = new RendererServicesMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setServices(services);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(services);
      return toListResult;
    }

    static @NonNull RendererServicesMessage fromList(@NonNull ArrayList<Object> list) {
      RendererServicesMessage pigeonResult = new RendererServicesMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object services = list.get(1);
      pigeonResult.setServices((List<String>) services);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RendererScanningMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String rendererService;

    public @Nullable String getRendererService() {
      return rendererService;
    }

    public void setRendererService(@Nullable String setterArg) {
      this.rendererService = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String rendererService;

      @CanIgnoreReturnValue
      public @NonNull Builder setRendererService(@Nullable String setterArg) {
        this.rendererService = setterArg;
        return this;
      }

      public @NonNull RendererScanningMessage build() {
        RendererScanningMessage pigeonReturn = new RendererScanningMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setRendererService(rendererService);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(rendererService);
      return toListResult;
    }

    static @NonNull RendererScanningMessage fromList(@NonNull ArrayList<Object> list) {
      RendererScanningMessage pigeonResult = new RendererScanningMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object rendererService = list.get(1);
      pigeonResult.setRendererService((String) rendererService);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RendererDevicesMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable Map<Object, Object> rendererDevices;

    public @Nullable Map<Object, Object> getRendererDevices() {
      return rendererDevices;
    }

    public void setRendererDevices(@Nullable Map<Object, Object> setterArg) {
      this.rendererDevices = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> rendererDevices;

      @CanIgnoreReturnValue
      public @NonNull Builder setRendererDevices(@Nullable Map<Object, Object> setterArg) {
        this.rendererDevices = setterArg;
        return this;
      }

      public @NonNull RendererDevicesMessage build() {
        RendererDevicesMessage pigeonReturn = new RendererDevicesMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setRendererDevices(rendererDevices);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(rendererDevices);
      return toListResult;
    }

    static @NonNull RendererDevicesMessage fromList(@NonNull ArrayList<Object> list) {
      RendererDevicesMessage pigeonResult = new RendererDevicesMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object rendererDevices = list.get(1);
      pigeonResult.setRendererDevices((Map<Object, Object>) rendererDevices);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RenderDeviceMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String rendererDevice;

    public @Nullable String getRendererDevice() {
      return rendererDevice;
    }

    public void setRendererDevice(@Nullable String setterArg) {
      this.rendererDevice = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String rendererDevice;

      @CanIgnoreReturnValue
      public @NonNull Builder setRendererDevice(@Nullable String setterArg) {
        this.rendererDevice = setterArg;
        return this;
      }

      public @NonNull RenderDeviceMessage build() {
        RenderDeviceMessage pigeonReturn = new RenderDeviceMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setRendererDevice(rendererDevice);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(rendererDevice);
      return toListResult;
    }

    static @NonNull RenderDeviceMessage fromList(@NonNull ArrayList<Object> list) {
      RenderDeviceMessage pigeonResult = new RenderDeviceMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object rendererDevice = list.get(1);
      pigeonResult.setRendererDevice((String) rendererDevice);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RecordMessage {
    private @Nullable Long viewId;

    public @Nullable Long getViewId() {
      return viewId;
    }

    public void setViewId(@Nullable Long setterArg) {
      this.viewId = setterArg;
    }

    private @Nullable String saveDirectory;

    public @Nullable String getSaveDirectory() {
      return saveDirectory;
    }

    public void setSaveDirectory(@Nullable String setterArg) {
      this.saveDirectory = setterArg;
    }

    public static final class Builder {

      private @Nullable Long viewId;

      @CanIgnoreReturnValue
      public @NonNull Builder setViewId(@Nullable Long setterArg) {
        this.viewId = setterArg;
        return this;
      }

      private @Nullable String saveDirectory;

      @CanIgnoreReturnValue
      public @NonNull Builder setSaveDirectory(@Nullable String setterArg) {
        this.saveDirectory = setterArg;
        return this;
      }

      public @NonNull RecordMessage build() {
        RecordMessage pigeonReturn = new RecordMessage();
        pigeonReturn.setViewId(viewId);
        pigeonReturn.setSaveDirectory(saveDirectory);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(viewId);
      toListResult.add(saveDirectory);
      return toListResult;
    }

    static @NonNull RecordMessage fromList(@NonNull ArrayList<Object> list) {
      RecordMessage pigeonResult = new RecordMessage();
      Object viewId = list.get(0);
      pigeonResult.setViewId((viewId == null) ? null : ((viewId instanceof Integer) ? (Integer) viewId : (Long) viewId));
      Object saveDirectory = list.get(1);
      pigeonResult.setSaveDirectory((String) saveDirectory);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterTextApiHandler {
    private final @NonNull BinaryMessenger binaryMessenger;

    public FlutterTextApiHandler(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by FlutterTextApiHandler. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void textChanged(@NonNull String textArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_vlc_player_platform_interface.FlutterTextApiHandler.textChanged";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(textArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }

  private static class VlcPlayerApiCodec extends StandardMessageCodec {
    public static final VlcPlayerApiCodec INSTANCE = new VlcPlayerApiCodec();

    private VlcPlayerApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AddAudioMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AddSubtitleMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return AudioTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return AudioTracksMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return BooleanMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return CreateMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return DelayMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return DurationMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return LoopingMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PlaybackSpeedMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PositionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return RecordMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return RenderDeviceMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return RendererDevicesMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return RendererScanningMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return RendererServicesMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return SetMediaMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return SnapshotMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return SpuTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 147:
          return SpuTracksMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 148:
          return TrackCountMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 149:
          return VideoAspectRatioMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 150:
          return VideoScaleMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 151:
          return VideoTrackMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 152:
          return VideoTracksMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 153:
          return ViewMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 154:
          return VolumeMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AddAudioMessage) {
        stream.write(128);
        writeValue(stream, ((AddAudioMessage) value).toList());
      } else if (value instanceof AddSubtitleMessage) {
        stream.write(129);
        writeValue(stream, ((AddSubtitleMessage) value).toList());
      } else if (value instanceof AudioTrackMessage) {
        stream.write(130);
        writeValue(stream, ((AudioTrackMessage) value).toList());
      } else if (value instanceof AudioTracksMessage) {
        stream.write(131);
        writeValue(stream, ((AudioTracksMessage) value).toList());
      } else if (value instanceof BooleanMessage) {
        stream.write(132);
        writeValue(stream, ((BooleanMessage) value).toList());
      } else if (value instanceof CreateMessage) {
        stream.write(133);
        writeValue(stream, ((CreateMessage) value).toList());
      } else if (value instanceof DelayMessage) {
        stream.write(134);
        writeValue(stream, ((DelayMessage) value).toList());
      } else if (value instanceof DurationMessage) {
        stream.write(135);
        writeValue(stream, ((DurationMessage) value).toList());
      } else if (value instanceof LoopingMessage) {
        stream.write(136);
        writeValue(stream, ((LoopingMessage) value).toList());
      } else if (value instanceof PlaybackSpeedMessage) {
        stream.write(137);
        writeValue(stream, ((PlaybackSpeedMessage) value).toList());
      } else if (value instanceof PositionMessage) {
        stream.write(138);
        writeValue(stream, ((PositionMessage) value).toList());
      } else if (value instanceof RecordMessage) {
        stream.write(139);
        writeValue(stream, ((RecordMessage) value).toList());
      } else if (value instanceof RenderDeviceMessage) {
        stream.write(140);
        writeValue(stream, ((RenderDeviceMessage) value).toList());
      } else if (value instanceof RendererDevicesMessage) {
        stream.write(141);
        writeValue(stream, ((RendererDevicesMessage) value).toList());
      } else if (value instanceof RendererScanningMessage) {
        stream.write(142);
        writeValue(stream, ((RendererScanningMessage) value).toList());
      } else if (value instanceof RendererServicesMessage) {
        stream.write(143);
        writeValue(stream, ((RendererServicesMessage) value).toList());
      } else if (value instanceof SetMediaMessage) {
        stream.write(144);
        writeValue(stream, ((SetMediaMessage) value).toList());
      } else if (value instanceof SnapshotMessage) {
        stream.write(145);
        writeValue(stream, ((SnapshotMessage) value).toList());
      } else if (value instanceof SpuTrackMessage) {
        stream.write(146);
        writeValue(stream, ((SpuTrackMessage) value).toList());
      } else if (value instanceof SpuTracksMessage) {
        stream.write(147);
        writeValue(stream, ((SpuTracksMessage) value).toList());
      } else if (value instanceof TrackCountMessage) {
        stream.write(148);
        writeValue(stream, ((TrackCountMessage) value).toList());
      } else if (value instanceof VideoAspectRatioMessage) {
        stream.write(149);
        writeValue(stream, ((VideoAspectRatioMessage) value).toList());
      } else if (value instanceof VideoScaleMessage) {
        stream.write(150);
        writeValue(stream, ((VideoScaleMessage) value).toList());
      } else if (value instanceof VideoTrackMessage) {
        stream.write(151);
        writeValue(stream, ((VideoTrackMessage) value).toList());
      } else if (value instanceof VideoTracksMessage) {
        stream.write(152);
        writeValue(stream, ((VideoTracksMessage) value).toList());
      } else if (value instanceof ViewMessage) {
        stream.write(153);
        writeValue(stream, ((ViewMessage) value).toList());
      } else if (value instanceof VolumeMessage) {
        stream.write(154);
        writeValue(stream, ((VolumeMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VlcPlayerApi {

    void initialize();

    void create(@NonNull CreateMessage msg);

    void dispose(@NonNull ViewMessage msg);

    void setStreamUrl(@NonNull SetMediaMessage msg);

    void play(@NonNull ViewMessage msg);

    void pause(@NonNull ViewMessage msg);

    void stop(@NonNull ViewMessage msg);

    @NonNull 
    BooleanMessage isPlaying(@NonNull ViewMessage msg);

    @NonNull 
    BooleanMessage isSeekable(@NonNull ViewMessage msg);

    void setLooping(@NonNull LoopingMessage msg);

    void seekTo(@NonNull PositionMessage msg);

    @NonNull 
    PositionMessage position(@NonNull ViewMessage msg);

    @NonNull 
    DurationMessage duration(@NonNull ViewMessage msg);

    void setVolume(@NonNull VolumeMessage msg);

    @NonNull 
    VolumeMessage getVolume(@NonNull ViewMessage msg);

    void setPlaybackSpeed(@NonNull PlaybackSpeedMessage msg);

    @NonNull 
    PlaybackSpeedMessage getPlaybackSpeed(@NonNull ViewMessage msg);

    @NonNull 
    SnapshotMessage takeSnapshot(@NonNull ViewMessage msg);

    @NonNull 
    TrackCountMessage getSpuTracksCount(@NonNull ViewMessage msg);

    @NonNull 
    SpuTracksMessage getSpuTracks(@NonNull ViewMessage msg);

    void setSpuTrack(@NonNull SpuTrackMessage msg);

    @NonNull 
    SpuTrackMessage getSpuTrack(@NonNull ViewMessage msg);

    void setSpuDelay(@NonNull DelayMessage msg);

    @NonNull 
    DelayMessage getSpuDelay(@NonNull ViewMessage msg);

    void addSubtitleTrack(@NonNull AddSubtitleMessage msg);

    @NonNull 
    TrackCountMessage getAudioTracksCount(@NonNull ViewMessage msg);

    @NonNull 
    AudioTracksMessage getAudioTracks(@NonNull ViewMessage msg);

    void setAudioTrack(@NonNull AudioTrackMessage msg);

    @NonNull 
    AudioTrackMessage getAudioTrack(@NonNull ViewMessage msg);

    void setAudioDelay(@NonNull DelayMessage msg);

    @NonNull 
    DelayMessage getAudioDelay(@NonNull ViewMessage msg);

    void addAudioTrack(@NonNull AddAudioMessage msg);

    @NonNull 
    TrackCountMessage getVideoTracksCount(@NonNull ViewMessage msg);

    @NonNull 
    VideoTracksMessage getVideoTracks(@NonNull ViewMessage msg);

    void setVideoTrack(@NonNull VideoTrackMessage msg);

    @NonNull 
    VideoTrackMessage getVideoTrack(@NonNull ViewMessage msg);

    void setVideoScale(@NonNull VideoScaleMessage msg);

    @NonNull 
    VideoScaleMessage getVideoScale(@NonNull ViewMessage msg);

    void setVideoAspectRatio(@NonNull VideoAspectRatioMessage msg);

    @NonNull 
    VideoAspectRatioMessage getVideoAspectRatio(@NonNull ViewMessage msg);

    @NonNull 
    RendererServicesMessage getAvailableRendererServices(@NonNull ViewMessage msg);

    void startRendererScanning(@NonNull RendererScanningMessage msg);

    void stopRendererScanning(@NonNull ViewMessage msg);

    @NonNull 
    RendererDevicesMessage getRendererDevices(@NonNull ViewMessage msg);

    void castToRenderer(@NonNull RenderDeviceMessage msg);

    @NonNull 
    BooleanMessage startRecording(@NonNull RecordMessage msg);

    @NonNull 
    BooleanMessage stopRecording(@NonNull ViewMessage msg);

    /** The codec used by VlcPlayerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return VlcPlayerApiCodec.INSTANCE;
    }
    /**Sets up an instance of `VlcPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable VlcPlayerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.initialize();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CreateMessage msgArg = (CreateMessage) args.get(0);
                try {
                  api.create(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  api.dispose(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setStreamUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SetMediaMessage msgArg = (SetMediaMessage) args.get(0);
                try {
                  api.setStreamUrl(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  api.play(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  api.pause(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  api.stop(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isPlaying", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  BooleanMessage output = api.isPlaying(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isSeekable", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  BooleanMessage output = api.isSeekable(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setLooping", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LoopingMessage msgArg = (LoopingMessage) args.get(0);
                try {
                  api.setLooping(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PositionMessage msgArg = (PositionMessage) args.get(0);
                try {
                  api.seekTo(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.position", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  PositionMessage output = api.position(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.duration", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  DurationMessage output = api.duration(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVolume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VolumeMessage msgArg = (VolumeMessage) args.get(0);
                try {
                  api.setVolume(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVolume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  VolumeMessage output = api.getVolume(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setPlaybackSpeed", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlaybackSpeedMessage msgArg = (PlaybackSpeedMessage) args.get(0);
                try {
                  api.setPlaybackSpeed(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getPlaybackSpeed", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  PlaybackSpeedMessage output = api.getPlaybackSpeed(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.takeSnapshot", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  SnapshotMessage output = api.takeSnapshot(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracksCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  TrackCountMessage output = api.getSpuTracksCount(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  SpuTracksMessage output = api.getSpuTracks(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SpuTrackMessage msgArg = (SpuTrackMessage) args.get(0);
                try {
                  api.setSpuTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  SpuTrackMessage output = api.getSpuTrack(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuDelay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DelayMessage msgArg = (DelayMessage) args.get(0);
                try {
                  api.setSpuDelay(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuDelay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  DelayMessage output = api.getSpuDelay(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addSubtitleTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AddSubtitleMessage msgArg = (AddSubtitleMessage) args.get(0);
                try {
                  api.addSubtitleTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracksCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  TrackCountMessage output = api.getAudioTracksCount(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  AudioTracksMessage output = api.getAudioTracks(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AudioTrackMessage msgArg = (AudioTrackMessage) args.get(0);
                try {
                  api.setAudioTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  AudioTrackMessage output = api.getAudioTrack(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioDelay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DelayMessage msgArg = (DelayMessage) args.get(0);
                try {
                  api.setAudioDelay(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioDelay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  DelayMessage output = api.getAudioDelay(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addAudioTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AddAudioMessage msgArg = (AddAudioMessage) args.get(0);
                try {
                  api.addAudioTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracksCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  TrackCountMessage output = api.getVideoTracksCount(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracks", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  VideoTracksMessage output = api.getVideoTracks(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VideoTrackMessage msgArg = (VideoTrackMessage) args.get(0);
                try {
                  api.setVideoTrack(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTrack", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  VideoTrackMessage output = api.getVideoTrack(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoScale", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VideoScaleMessage msgArg = (VideoScaleMessage) args.get(0);
                try {
                  api.setVideoScale(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoScale", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  VideoScaleMessage output = api.getVideoScale(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoAspectRatio", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VideoAspectRatioMessage msgArg = (VideoAspectRatioMessage) args.get(0);
                try {
                  api.setVideoAspectRatio(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoAspectRatio", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  VideoAspectRatioMessage output = api.getVideoAspectRatio(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAvailableRendererServices", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  RendererServicesMessage output = api.getAvailableRendererServices(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRendererScanning", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RendererScanningMessage msgArg = (RendererScanningMessage) args.get(0);
                try {
                  api.startRendererScanning(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRendererScanning", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  api.stopRendererScanning(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getRendererDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  RendererDevicesMessage output = api.getRendererDevices(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.castToRenderer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RenderDeviceMessage msgArg = (RenderDeviceMessage) args.get(0);
                try {
                  api.castToRenderer(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRecording", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RecordMessage msgArg = (RecordMessage) args.get(0);
                try {
                  BooleanMessage output = api.startRecording(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRecording", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ViewMessage msgArg = (ViewMessage) args.get(0);
                try {
                  BooleanMessage output = api.stopRecording(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
